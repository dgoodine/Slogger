{"name":"Slogger","tagline":"A simple, fast and flexible logging framework for Swift","body":"## Why Another Swift Logging Framework?\r\n\r\nWhen I started doing serious Swift development, I naturally looked around for a logging framework.  I found *XCGLogger* by Dave Wood @DaveWoodCom (https://github.com/DaveWoodCom/XCGLogger).  While it's fast and well constructed, I needed some extra features and decided to build my own.  But I did learn a few things from him so he deserves some props. üç∫üç∫üç∫\r\n\r\n*Slogger* uses much the same approach and identical function signatures as *XCGLogger*, so they are interchangeable without modifying existing logging sites. Be sure to check the **Advanced Features** section below ‚Äì particularly *Radioactive Logging* and *Categories* ‚Äì to see why I decided to go this route.\r\n\r\n## General Info\r\n\r\n### Logging Levels\r\nThe typical logger levels are supported:\r\n\r\n\tpublic enum Level : Int, Comparable {\r\n\t  case None, Severe, Error, Warning, Info, Debug, Verbose\r\n\r\n\t  static let allValues = [None, Severe, Error, Warning, Info, Debug, Verbose]\r\n\t}\r\n\t\r\nThe order of the levels is higher-priority first. Thus the threshold is evaluated using the *<=* operator. Here's the function that's used internally to determine if a message should be logged.  (See below for information on the *override* and *category* parameters.)\r\n\r\n\t  public func canLog (override override: Level?, category: T?, level: Level) -> Bool {\r\n\t    if override != nil {\r\n\t      return (level == .None) ? false : level <= override\r\n\t    }\r\n\r\n\t    if category != nil, let categoryLevel = categories[category!] {\r\n\t      return level <= categoryLevel\r\n\t    }\r\n\r\n\t\treturn level <= activeLevel\r\n\t  }\r\n\t  \r\nNote that the exception that specifying an *override* value of *.None* disables logging for the logging site.\r\n\r\n### Creating a *Slogger* Instance\r\nSetting up a logger can be as simple as one line of code:\r\n\r\n\tlet log = Slogger<NoCategories>(defaultLevel: .Info)\r\n\t\r\nAnd you'll likely want to tailor your build for debug/release:\r\n\r\n\t#if DEBUG\r\n\tlet log = Slogger<NoCategories>(defaultLevel: .Info)\r\n\t#else\r\n\tlet log = Slogger<NoCategories>(defaultLevel: .Warning)\r\n\t#endif \r\n\r\nThe public interface is fully documented in the headers for reference in *Xcode* (use Alt-Click).  See the Docs directory for an HTML-based version.  (At some point there will be a docset available, but at the moment there are issues with both Jazzy and AppleDoc that I haven't had time to resolve.)\r\n\r\nThe *Slogger* class is generic to support categories, as explained below.\r\n\r\n### Logging Site Functions\r\nEach log level has *autoclosure* and *noescape* trailing closure implementations, so the following are both valid forms:\r\n\r\n\tlog.debug(\"Enter\")\r\n\tlog.debug() { \"Enter\" }\r\n\t\r\n**Important Note**: The resulting closures **are not evaluated if the logging site doesn't pass the level threshold**.  So don't worry about expensive computations inside them.  And don't rely on them for side-effects.\r\n\r\nFor completeness, functions are provided for the .None level that have no-op implementations.  Thus the only overhead would be allocating the closure on the stack and the function call.\r\n\r\n\tlog.none(\"Enter\")\r\n\tlog.none() { \"Enter\" }\r\n\t\r\n### Log Instance Properties\r\nThe following properties of each log instance are exposed and have read/write access.  They can be modified at runtime, either programmatically or by using the debugger at a breakpoint.\r\n\r\nProperty | Type | Comments\r\n--- | --- | ---\r\nlevel | Level | The active, global level of the logger instance.\r\ndateFormatter | NSDateFormatter | Formatter to use for dates.\r\ndetails | [Detail] | Determines what to output and in what order.\r\ncategories | [T : Level] | A mapping between categories and levels (see below)\r\ngenerator | Generator | Current generator.  Defaults to *defaultGenerator*.\r\ndestinations | [Destination] | Destinations this logger will write to.  Defaults to [*consoleDestination*].\r\ncolorMap | ColorMap | The current colorMap.\r\ndefaultGenerator | Generator | Default generator implementation.\r\nconsoleDestination | Destination | The default console implementation with an XCodeColors/ANSI decorator.\r\nhits | UInt64 | Number of events logged.\r\nmisses | UInt64 | Number of events logged.Number of events that weren't logged due to logging threshold.\r\n\r\n**Important Note**: *Slogger* instances are inherently thread-safe, as are all supported implementations of *Slogger* types and protocols.  If you provide an implementation for a protocol, it **MUST** be thread-safe as well.\r\n\r\n## Advanced Features\r\n\r\n### Destinations\r\nThe *Destination* protocol allows you to write your own log destinations and add them to the logger. The following destinations are provided:\r\n\r\nDestination | Status\r\n--- | ---\r\nConsole | Supported\r\nMemory | Supported\r\nFile | Coming Soon‚Ñ¢\r\nNetwork | Planned but no ETA\r\n\r\n### Generators\r\nThese are closures that output a log entry based on information from the logging site. They are configurable per logging destination.  You can use the provided generators or implement your own.\r\n\r\nThe default uses the typical pattern:\r\n\r\n\t- [10/25/2015, 15:33:57.435 EDT] SloggerTests.swift:117 callIt [] Severe: Message...\r\n\t\r\nList of supported generators (see the source for details):\r\n\r\nGenerator | Status\r\n--- | ---\r\ndefaultGenerator | Supported\r\njsonGenerator | Coming Soon‚Ñ¢\r\nxmlGenerator | Coming Soon‚Ñ¢\r\ntabGenerator | Coming Soon‚Ñ¢\r\ncsvGenerator | Coming Soon‚Ñ¢\r\n\r\n### Details\r\nYou can configure what details you want to see in the logs ‚Äì and in what order ‚Äì by providing an array of enum values for each detail supported.  This makes it easy to customize your output format.\r\n\r\nThe default value includes all available *Detail* values, in a typical order:\r\n\r\n\t[.Date, .File, .Function, .Category, .Level]\r\n\t\r\nThe inclusion of the logging message is implicit.\r\n\r\n### Configurable Decorators\r\nYou can supply a decorator that will further adjust the format of the generator output.  These are configured per destination.  Note: XCodeColors uses ANSI standard format, so you can use that decorator to decorate your file logs too.  Any command line shell will display them correctly.\r\n\r\nDecorators | Status | Info\r\n--- | --- | ---\r\nXCodeColors (ANSI) | Supported | (https://github.com/robbiehanson/XcodeColors)\r\n\r\n### Configurable Colormaps\r\nMake your own color map for mapping *Level* to color in a platform- and decorator-independent way.  See the *ColorMap* type for more information.\r\n\r\n### Radioactive Logging\r\nRadioactive logging allows logging to execute based on evaluation of an optional *override* value at logging sites.  If the *override* value is non-nil, it is evaluated first. If it is less than or equal to the level of the site, the site will be logged.  If not, logging evaluation will proceed by the normal process.\r\n\r\nAs an example, imagine you have a *Request* object base class in a services implementation.  You could define a *logOverride* property of type *Level*, defaulting to *nil*. In the service code that processes requests, you would then provide the value of the *logOverride* property of requests as the *override* parameter at all logging sites.  This would cause any non-nil value in requests being processed to be used to override logging for the service.\r\n\r\nAs a use-case, if you had a service that was processing tons of request, but a specific one was failing in a subtle way, you could use the following procedure to get more information for just that request, as follows:\r\n\r\n1. Add code to set a *logOverride* value (typically .Verbose) where the request is created\r\n1. Set the *activeLevel* property in the log instance to *.None*\r\n1. Run your code\r\n\r\nYou would then see logging for *only* that specific request, at whatever level you specified as the override.  This allows you to focus diagnosis on a particular object as it flows through the system, rather than getting a firehose of logging information for requests that you don't care about if you were to simply set the *activeLevel* property to a higher value.\r\n\r\nThis procedure can be done by simply modifying your code at the site of creation of the request, or it can be done by setting a breakpoint at runtime and using the debugger to modify the properties.\r\n\r\n### Categories\r\nIn addition to the two convenience functions for each level mentioned above, logging sites allow a *Category* to also be passed to the logging function.  While a category could be any type conforming to the *Hashable* protocol, you would typically define an *enum* for type safety.\r\n\r\nOnce the categories are defined, you can configure your logger to customize the logging level for that category (.Debug or .Verbose, for example), even at runtime.  This allows more fine-tuning of logging if, for example, you want to see more logging of the events for a particular concern (database calls, networking transactions, etc).\r\n\r\nThe design of *Slogger* is such that third-party frameworks can expose their log instance and document their category values for developers using the framework.  Then, if the developers need to diagnose a problem inside the framework, they can simply adjust the logging levels for particular categories to get more information.  This is particularly useful in cases where the framework developer doesn't release the source code.\r\n\r\n## Implementing Categories\r\n\r\nHere's an example of how you should implement your custom categories, taken from the unit test code in *Slogger*.\r\n\r\nFirst, define your category enum:\r\n\r\n\tenum TestCategory : String, SloggerCategory {\r\n\t  case First, Second\r\n\r\n\t  static func allValues () -> [TestCategory] {\r\n\t    return [First, Second]\r\n\t  }\r\n\t}\r\n\r\nSecond, subclass the generic *Slogger* class to bind it to your category type:\r\n\r\n\tclass TestLogger : Slogger<TestCategory> {}\r\n\t\r\nThen create your logger in the obvious way:\r\n\r\n\tpublic let log = TestLogger()\r\n\t\r\nNaturally, if you want your logger to have customized values (generators, decorators, etc.), you can override the *init* method and provide that information there.\r\n\r\n*Slogger* is designed so that all public public properties for a *Slogger* instance can be modified at runtime, without having to worry about its internal state.\r\n\r\n## Performance\r\nHere are initial performance figures for logging calls with a release build (as of version 1.0).  See the *SloggerPerformanceIOS* project for details.  (Use of *Slogger* for Mac OS applications should be identical to that of the simulator.)\r\n\r\nDevice | Destinations | Level | log.Debug(.Only, \"Message\")\r\n--- | --- | --- | ---\r\nSimulator | [MemoryDestination] | .None | 363ns\r\nSimulator | [] | .Severe | 363ns\r\nSimulator | [MemoryDestination] | .Severe | 28¬µs\r\nSimulator | [ConsoleDestination] | .Severe | 240¬µs\r\niPhone 6 | [MemoryDestination] | .None | 921ns\r\niPhone 6 | [] | .Severe | 943ns\r\niPhone 6 | [MemoryDestination] | .Severe | 65¬µs\r\niPhone 6 | [ConsoleDestination] | .Severe | 718¬µs\r\n\r\n## How To Get it\r\nHere's how you can get *Slogger* if you want to give it a try:\r\n\r\nMeans | Status | Comment\r\n--- | --- | ---\r\nGithub | Supported | https://github.com/dgoodine/Slogger\r\nCarthage | In process |\r\nCocoapods | In process | Not a fan of invasive development tools, but it's popular\r\n\r\n\r\n## Feedback\r\nPlease do use the issues section on Github report bugs, raise questions, offer suggestions for improvements or ask questions about the implementation.  And if you want to contribute, feel free to discuss it in the issues section and/or issue a pull request.\r\n\r\n***Happy logging!***\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}