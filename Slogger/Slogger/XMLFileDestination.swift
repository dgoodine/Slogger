//
//  XMLFileDestination.swift
//  Slogger
//
//  Created by David Goodine on 11/7/15.
//  Copyright Â© 2015 David Goodine. All rights reserved.
//

import Foundation

/// Destination for XML file output.
public class XMLFileDestination : TextFileDestination {

  /// Configuration instance.
  public class XMLConfiguration :  Configuration {

    /// Designated initializer.
    public init (generator: Generator = XMLGenerator()) {
      super.init(generator: generator)
      self.fileExtension = "xml"
      self.entryDelimiter = "\n"
      self.fileWrapperGenerator = { (isPreamble) in
        if isPreamble {
          return "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n"
            + "<!-- File generated by Slogger: \"http://dgoodine.github.io/Slogger/\" -->\n"
            + "<log>\n"
        } else {
          return "\n</log>\n"
        }
      }
    }
  }

  /// Designated initializer.
  init(directory: String, config: XMLConfiguration = XMLConfiguration()) {
    super.init(directory: directory, config: config)
  }
}

/// XML log entry generator.
public class XMLGenerator : Generator {

  override func emitBegin(outputString: NSMutableString) {
    outputString.appendString("<entry>")
  }

  override func emit (outputString : NSMutableString, type: ValueType)  {

    switch type {

    case .BoolValue (let detail, let value):
      outputString.appendString("<\(detail)>\(value)</\(detail)>")

    case .IntValue (let detail, let value):
      outputString.appendString("<\(detail)>\(value)</\(detail)>")

    case .StringValue(let detail, let value, let protect):
      let str = protect ? "<![CDATA[\(value)]]>" : value
      outputString.appendString("<\(detail)>\(str)</\(detail)>")

    case .DateValue(let detail, let value):
      let ds = dateFormatter.stringFromDate(value)
      outputString.appendString("<\(detail)>\(ds)</\(detail)>")
    }
  }

  override func emitDelimiter(outputString: NSMutableString) {
    outputString.appendString("")
  }

  override func emitEnd(outputString: NSMutableString) {
    outputString.appendString("</entry>")
  }

}